"use strict";(self.webpackChunkreact_nodegui=self.webpackChunkreact_nodegui||[]).push([[9573],{5819:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var o=i(4848),t=i(8453);const s={sidebar_label:"Debugging",title:"Debugging"},r=void 0,d={id:"guides/debugging",title:"Debugging",description:"Application Debugging",source:"@site/docs/guides/debugging.md",sourceDirName:"guides",slug:"/guides/debugging",permalink:"/docs/guides/debugging",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Debugging",title:"Debugging"},sidebar:"guides",previous:{title:"Packaging",permalink:"/docs/guides/packaging"},next:{title:"Debugging in VSCode",permalink:"/docs/guides/debugging-in-vscode"}},c={},l=[{value:"Application Debugging",id:"application-debugging",level:2},{value:"Debugging Qode process",id:"debugging-qode-process",level:2},{value:"Command Line Switches",id:"command-line-switches",level:3},{value:"<code>--inspect=[port]</code>",id:"--inspectport",level:4},{value:"<code>--inspect-brk=[port]</code>",id:"--inspect-brkport",level:4},{value:"External Debuggers",id:"external-debuggers",level:3}];function a(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"application-debugging",children:"Application Debugging"}),"\n",(0,o.jsx)(n.p,{children:"Whenever your React NodeGui application is not behaving the way you wanted it to,\nan array of debugging tools might help you find coding errors, performance\nbottlenecks, or optimization opportunities."}),"\n",(0,o.jsxs)(n.p,{children:["Since a React NodeGui application runs on Qode and Qode is essentially Node.Js. We can consider a NodeGui app as a regular NodeJs app. Hence, you can use any debugging tool that you use with Node.Js\nOne of the most popular way of debugging a Node.Js app is by making use of the ",(0,o.jsx)(n.a,{href:"https://nodejs.org/en/docs/inspector/",children:"Chromium Developer Tools"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Google offers ",(0,o.jsx)(n.a,{href:"https://developer.chrome.com/devtools",children:"excellent documentation for their developer tools"}),".\nWe recommend that you make yourself familiar with them - they are usually one\nof the most powerful utilities in any NodeGui Developer's tool belt."]}),"\n",(0,o.jsx)(n.h2,{id:"debugging-qode-process",children:"Debugging Qode process"}),"\n",(0,o.jsxs)(n.p,{children:["To debug JavaScript that's executed in the Qode/Node process you will need to use an external debugger and\nlaunch Qode with the ",(0,o.jsx)(n.code,{children:"--inspect"})," or ",(0,o.jsx)(n.code,{children:"--inspect-brk"})," switch. Once you run it you can open up Chrome and visit ",(0,o.jsx)(n.code,{children:"chrome://inspect"})," where you should see your app listed."]}),"\n",(0,o.jsx)(n.h3,{id:"command-line-switches",children:"Command Line Switches"}),"\n",(0,o.jsx)(n.p,{children:"Use one of the following command line switches to enable debugging of the process:"}),"\n",(0,o.jsx)(n.h4,{id:"--inspectport",children:(0,o.jsx)(n.code,{children:"--inspect=[port]"})}),"\n",(0,o.jsxs)(n.p,{children:["Qode will listen for V8 inspector protocol messages on the specified ",(0,o.jsx)(n.code,{children:"port"}),",\nan external debugger will need to connect on this port. The default ",(0,o.jsx)(n.code,{children:"port"})," is\n",(0,o.jsx)(n.code,{children:"9229"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"qode --inspect=9229 your/app\n"})}),"\n",(0,o.jsx)(n.h4,{id:"--inspect-brkport",children:(0,o.jsx)(n.code,{children:"--inspect-brk=[port]"})}),"\n",(0,o.jsxs)(n.p,{children:["Like ",(0,o.jsx)(n.code,{children:"--inspect"})," but pauses execution on the first line of JavaScript."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Note"})}),"\n",(0,o.jsxs)(n.p,{children:["If you are using the official boilerplate ",(0,o.jsx)(n.code,{children:"nodegui-starter"}),", then you can achieve this by running"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"npm run debug\n"})}),"\n",(0,o.jsx)(n.h3,{id:"external-debuggers",children:"External Debuggers"}),"\n",(0,o.jsx)(n.p,{children:"You will need to use a debugger that supports the V8 inspector protocol."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Connect Chrome by visiting ",(0,o.jsx)(n.code,{children:"chrome://inspect"})," and selecting to inspect the\nlaunched NodeGui app present there."]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/guides/debugging-in-vscode",children:"Debugging the NodeGui app in VSCode"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>d});var o=i(6540);const t={},s=o.createContext(t);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);